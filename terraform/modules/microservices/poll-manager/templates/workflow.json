{
  "Comment": "Poll manager workflow",
  "StartAt": "Method",
  "States": {
    "Method": {
      "Choices": [
        {
          "Next": "Create poll",
          "StringEquals": "POST",
          "Variable": "$.method"
        },
        {
          "Next": "Archive poll",
          "StringEquals": "DELETE",
          "Variable": "$.method"
        }
      ],
      "Default": "Invalid method",
      "Type": "Choice"
    },
    "Create poll": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "${createPollLambdaArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Poll created"
    },
    "Poll created": {
      "Type": "Succeed"
    },
    "Archive poll": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${pollsTable}",
        "Key": {
          "PollId": {
            "S.$": "$.pollId"
          }
        },
        "ConditionExpression": "#userId = :userId AND #archived = :unarchived",
        "UpdateExpression": "SET #archived = :archived",
        "ExpressionAttributeNames": {
          "#userId": "UserId",
          "#archived": "Archived"
        },
        "ExpressionAttributeValues": {
          ":userId": {
            "S.$": "$.userId"
          },
          ":unarchived": {
            "BOOL": false
          },
          ":archived": {
            "BOOL": true
          }
        },
        "ReturnValues": "ALL_NEW"
      },
      "Next": "Poll archived",
      "Retry": [
        {
          "ErrorEquals": ["States.ALL"],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3
        }
      ],
      "ResultPath": "$.pollOutput",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Poll archival failed"
        }
      ]
    },
    "Poll archived": {
      "Type": "Succeed"
    },
    "Invalid method": {
      "Type": "Fail"
    },
    "Poll archival failed": {
      "Type": "Fail",
      "ErrorPath": "$.Error",
      "CausePath": "$.Cause"
    }
  }
}
